services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-mydatabase}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:latest
    container_name: redis_cache
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: docker/app.dockerfile
    container_name: express-vue-app
    environment:
      POSTGRES_URL: postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-mydatabase}
      APP_INTERNAL_PORT: ${APP_INTERNAL_PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
      cache:
        condition: service_healthy
    volumes:
      - public_app_data:/app/public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_INTERNAL_PORT:-3000}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-mydatabase}?sslmode=disable"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9187/metrics",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    build:
      context: .
      dockerfile: docker/prometheus.dockerfile
    container_name: prometheus
    depends_on:
      postgres-exporter:
        condition: service_healthy
    volumes:
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  postgres_data:
  redis_data:
  public_app_data:
  prometheus_data:
  grafana_data:
